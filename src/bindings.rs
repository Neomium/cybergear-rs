/* automatically generated by rust-bindgen 0.71.1 */
#![allow(warnings)]

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2Y: u32 = 0;
pub const __GLIBC_USE_ISOC23: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 32;
pub const __WORDSIZE32_SIZE_ULONG: u32 = 0;
pub const __WORDSIZE32_PTRDIFF_LONG: u32 = 0;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __TIMESIZE: u32 = 32;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 41;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 0;
pub const __STATFS_MATCHES_STATFS64: u32 = 0;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 0;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -2147483648;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 2147483647;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 4294967295;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const INTPTR_MIN: i32 = -2147483648;
pub const INTPTR_MAX: u32 = 2147483647;
pub const UINTPTR_MAX: u32 = 4294967295;
pub const PTRDIFF_MIN: i32 = -2147483648;
pub const PTRDIFF_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: u32 = 4294967295;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub type __u_char = ::core::ffi::c_uchar;
pub type __u_short = ::core::ffi::c_ushort;
pub type __u_int = ::core::ffi::c_uint;
pub type __u_long = ::core::ffi::c_ulong;
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_longlong;
pub type __uint64_t = ::core::ffi::c_ulonglong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::core::ffi::c_longlong;
pub type __u_quad_t = ::core::ffi::c_ulonglong;
pub type __intmax_t = ::core::ffi::c_longlong;
pub type __uintmax_t = ::core::ffi::c_ulonglong;
pub type __dev_t = __uint64_t;
pub type __uid_t = ::core::ffi::c_uint;
pub type __gid_t = ::core::ffi::c_uint;
pub type __ino_t = ::core::ffi::c_ulong;
pub type __ino64_t = __uint64_t;
pub type __mode_t = ::core::ffi::c_uint;
pub type __nlink_t = ::core::ffi::c_uint;
pub type __off_t = ::core::ffi::c_long;
pub type __off64_t = __int64_t;
pub type __pid_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::core::ffi::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::core::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::core::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::core::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::core::ffi::c_long;
pub type __rlim_t = ::core::ffi::c_ulong;
pub type __rlim64_t = __uint64_t;
pub type __id_t = ::core::ffi::c_uint;
pub type __time_t = ::core::ffi::c_long;
pub type __useconds_t = ::core::ffi::c_uint;
pub type __suseconds_t = ::core::ffi::c_long;
pub type __suseconds64_t = __int64_t;
pub type __daddr_t = ::core::ffi::c_int;
pub type __key_t = ::core::ffi::c_int;
pub type __clockid_t = ::core::ffi::c_int;
pub type __timer_t = *mut ::core::ffi::c_void;
pub type __blksize_t = ::core::ffi::c_long;
pub type __blkcnt_t = ::core::ffi::c_long;
pub type __blkcnt64_t = __int64_t;
pub type __fsblkcnt_t = ::core::ffi::c_ulong;
pub type __fsblkcnt64_t = __uint64_t;
pub type __fsfilcnt_t = ::core::ffi::c_ulong;
pub type __fsfilcnt64_t = __uint64_t;
pub type __fsword_t = ::core::ffi::c_int;
pub type __ssize_t = ::core::ffi::c_int;
pub type __syscall_slong_t = ::core::ffi::c_long;
pub type __syscall_ulong_t = ::core::ffi::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::core::ffi::c_char;
pub type __intptr_t = ::core::ffi::c_int;
pub type __socklen_t = ::core::ffi::c_uint;
pub type __sig_atomic_t = ::core::ffi::c_int;
pub type __time64_t = __int64_t;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::core::ffi::c_schar;
pub type int_fast16_t = ::core::ffi::c_int;
pub type int_fast32_t = ::core::ffi::c_int;
pub type int_fast64_t = ::core::ffi::c_longlong;
pub type uint_fast8_t = ::core::ffi::c_uchar;
pub type uint_fast16_t = ::core::ffi::c_uint;
pub type uint_fast32_t = ::core::ffi::c_uint;
pub type uint_fast64_t = ::core::ffi::c_ulonglong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[doc = " 获取设备 ID (通信类型 0) ;获取设备的 ID 和 64 位 MCU 唯一 标识符"]
pub const cyber_gear_can_communication_type_t_COMMUNICATION_FETCH_DEVICE_ID:
    cyber_gear_can_communication_type_t = 0;
#[doc = " 运控模式电机控制指令 (通信类型 1)用来向电机发送控制指令"]
pub const cyber_gear_can_communication_type_t_COMMUNICATION_MOTION_CONTROL_COMMAND:
    cyber_gear_can_communication_type_t = 1;
#[doc = " 电机反馈数据 (通信类型 2) 用来向主机反馈电机运行状态"]
pub const cyber_gear_can_communication_type_t_COMMUNICATION_STATUS_REPORT:
    cyber_gear_can_communication_type_t = 2;
#[doc = " 电机使能运行 (通信类型 3)"]
pub const cyber_gear_can_communication_type_t_COMMUNICATION_ENABLE_DEVICE:
    cyber_gear_can_communication_type_t = 3;
#[doc = " 电机停止运行 (通信类型 4)"]
pub const cyber_gear_can_communication_type_t_COMMUNICATION_DISABLE_DEVICE:
    cyber_gear_can_communication_type_t = 4;
#[doc = " 设置电机机械零位(通信类型 6)会把当前电机位置设为机械零 位(掉电丢失)"]
pub const cyber_gear_can_communication_type_t_COMMUNICATION_SET_MECHANICAL_ZERO_POSITION:
    cyber_gear_can_communication_type_t = 6;
#[doc = " 设置电机 CAN_ID(通信类型 7)更改当前电机 CAN_ID , 立即生 效。"]
pub const cyber_gear_can_communication_type_t_COMMUNICATION_SET_CAN_ID:
    cyber_gear_can_communication_type_t = 7;
#[doc = " 单个参数读取(通信类型 17)"]
pub const cyber_gear_can_communication_type_t_COMMUNICATION_READ_SINGLE_PARAM:
    cyber_gear_can_communication_type_t = 17;
#[doc = " 单个参数写入(通信类型 18) (掉电丢失)"]
pub const cyber_gear_can_communication_type_t_COMMUNICATION_WRITE_SINGLE_PARAM:
    cyber_gear_can_communication_type_t = 18;
#[doc = " 故障反馈帧(通信类型 21)"]
pub const cyber_gear_can_communication_type_t_COMMUNICATION_ERROR_REPORT:
    cyber_gear_can_communication_type_t = 21;
pub type cyber_gear_can_communication_type_t = ::core::ffi::c_uint;
#[doc = " Name 电机名称\n 参数类型 String"]
pub const cyber_gear_config_index_t_CONFIG_WR_NAME: cyber_gear_config_index_t = 0;
#[doc = " BarCode\n 参数类型 String"]
pub const cyber_gear_config_index_t_CONFIG_R_BAR_CODE: cyber_gear_config_index_t = 1;
#[doc = " BootCodeVersion\n 参数类型 String"]
pub const cyber_gear_config_index_t_CONFIG_R_BOOT_CODE_VERSION: cyber_gear_config_index_t = 4096;
#[doc = " BootBuildDate\n 参数类型 String"]
pub const cyber_gear_config_index_t_CONFIG_R_BOOT_BUILD_DATE: cyber_gear_config_index_t = 4097;
#[doc = " BootBuildTime\n 参数类型 String"]
pub const cyber_gear_config_index_t_CONFIG_R_BOOT_BUILD_TIME: cyber_gear_config_index_t = 4098;
#[doc = " AppCodeVersion\n 参数类型 String"]
pub const cyber_gear_config_index_t_CONFIG_R_APP_CODE_VERSION: cyber_gear_config_index_t = 4099;
#[doc = " AppGitVersion\n 参数类型 String"]
pub const cyber_gear_config_index_t_CONFIG_R_APP_GIT_VERSION: cyber_gear_config_index_t = 4100;
#[doc = " AppBuildDate\n 参数类型 String"]
pub const cyber_gear_config_index_t_CONFIG_R_APP_BUILD_DATE: cyber_gear_config_index_t = 4101;
#[doc = " AppBuildTime\n 参数类型"]
pub const cyber_gear_config_index_t_CONFIG_R_APP_BUILD_TIME: cyber_gear_config_index_t = 4102;
#[doc = " AppCodeName\n 参数类型"]
pub const cyber_gear_config_index_t_CONFIG_R_APP_CODE_NAME: cyber_gear_config_index_t = 4103;
#[doc = " echoPara1\n 参数类型"]
pub const cyber_gear_config_index_t_CONFIG_R_ECHO_PARA1: cyber_gear_config_index_t = 8192;
#[doc = " echoPara2\n 参数类型"]
pub const cyber_gear_config_index_t_CONFIG_R_ECHO_PARA2: cyber_gear_config_index_t = 8193;
#[doc = " echoPara3\n 参数类型"]
pub const cyber_gear_config_index_t_CONFIG_R_ECHO_PARA3: cyber_gear_config_index_t = 8194;
#[doc = " echoPara4\n 参数类型"]
pub const cyber_gear_config_index_t_CONFIG_R_ECHO_PARA4: cyber_gear_config_index_t = 8195;
#[doc = " echoFreHz\n 参数类型"]
pub const cyber_gear_config_index_t_CONFIG_WR_ECHO_FRE_HZ: cyber_gear_config_index_t = 8196;
#[doc = " MechOffset 电机磁编码器角度偏置\n 参数类型 float [-7, 7]"]
pub const cyber_gear_config_index_t_CONFIG_R_MECH_OFFSET: cyber_gear_config_index_t = 8197;
#[doc = " MechPos_init 初始多圈时的参考角度\n 参数类型 float [-50, 50]"]
pub const cyber_gear_config_index_t_CONFIG_WR_MECH_POS_INIT: cyber_gear_config_index_t = 8198;
#[doc = " limit_torque 转矩限制\n 参数类型 float [0, 12]"]
pub const cyber_gear_config_index_t_CONFIG_WR_LIMIT_TORQUE: cyber_gear_config_index_t = 8199;
#[doc = " I_FW_MAX 弱磁电 流值，默认0\n 参数类型 float [0, 33]"]
pub const cyber_gear_config_index_t_CONFIG_WR_I_FW_MAX: cyber_gear_config_index_t = 8200;
#[doc = " motor_index 电机 index，标记电机关节位置\n 参数类型 uint8_t [0, 20]"]
pub const cyber_gear_config_index_t_CONFIG_WR_MOTOR_INDEX: cyber_gear_config_index_t = 8201;
#[doc = " CAN_ID 本节点 id\n 参数类型 uint8_t [0, 127]"]
pub const cyber_gear_config_index_t_CONFIG_WR_CAN_ID: cyber_gear_config_index_t = 8202;
#[doc = " CAN_MASTER can 主机 id\n 参数类型 uint8_t [0, 127]"]
pub const cyber_gear_config_index_t_CONFIG_WR_CAN_MASTER: cyber_gear_config_index_t = 8203;
#[doc = " CAN_TIMEOUT can 超时 阈值，默 认0\n 参数类型 uint32_t [0, 10000]"]
pub const cyber_gear_config_index_t_CONFIG_WR_CAN_TIMEOUT: cyber_gear_config_index_t = 8204;
#[doc = " motorOverTemp 电机保护温度值，temp (度) *10\n 参数类型 uint16_t [0, 1500]"]
pub const cyber_gear_config_index_t_CONFIG_WR_MOTOR_OVER_TEMP: cyber_gear_config_index_t = 8205;
#[doc = " overTempTime 过温时间\n 参数类型 uint32_t [0, 100000]"]
pub const cyber_gear_config_index_t_CONFIG_WR_OVER_TEMP_TIME: cyber_gear_config_index_t = 8206;
#[doc = " GearRatio 传动比\n 参数类型 float [1, 64]"]
pub const cyber_gear_config_index_t_CONFIG_WR_GEAR_RATIO: cyber_gear_config_index_t = 8207;
#[doc = " Tq_caliType 转矩标定方法设定\n 参数类型 uint8_t 0, 1"]
pub const cyber_gear_config_index_t_CONFIG_WR_TQ_CALI_TYPE: cyber_gear_config_index_t = 8208;
#[doc = " cur_filt_gain 电流滤波参数\n 参数类型 float [0, 1]"]
pub const cyber_gear_config_index_t_CONFIG_WR_CUR_FILT_GAIN: cyber_gear_config_index_t = 8209;
#[doc = " cur_kp 电流 kp\n 参数类型 float [0, 200]"]
pub const cyber_gear_config_index_t_CONFIG_WR_CUR_KP: cyber_gear_config_index_t = 8210;
#[doc = " cur_ki 电流 ki\n 参数类型 float [0, 200]"]
pub const cyber_gear_config_index_t_CONFIG_WR_CUR_KI: cyber_gear_config_index_t = 8211;
#[doc = " spd_kp 速度 kp\n 参数类型 float [0, 200]"]
pub const cyber_gear_config_index_t_CONFIG_WR_SPD_KP: cyber_gear_config_index_t = 8212;
#[doc = " spd_ki 速度 ki\n 参数类型 float [0, 200]"]
pub const cyber_gear_config_index_t_CONFIG_WR_SPD_KI: cyber_gear_config_index_t = 8213;
#[doc = " loc_kp 位置 kp\n 参数类型 float [0, 200]"]
pub const cyber_gear_config_index_t_CONFIG_WR_LOC_KP: cyber_gear_config_index_t = 8214;
#[doc = " spd_filt_gain 速度滤波参数\n 参数类型 float [0, 1]"]
pub const cyber_gear_config_index_t_CONFIG_WR_SPD_FILT_GAIN: cyber_gear_config_index_t = 8215;
#[doc = " limit_spd 位置环速度限制\n 参数类型 float [0, 200]"]
pub const cyber_gear_config_index_t_CONFIG_WR_LIMIT_SPD: cyber_gear_config_index_t = 8216;
#[doc = " limit_cur 位置速度控制电流限制\n 参数类型 float [0, 27]"]
pub const cyber_gear_config_index_t_CONFIG_WR_LIMIT_CUR: cyber_gear_config_index_t = 8217;
#[doc = " timeUse0\n 参数类型 uint16_t"]
pub const cyber_gear_config_index_t_CONFIG_R_TIME_USE0: cyber_gear_config_index_t = 12288;
#[doc = " timeUse1\n 参数类型 uint16_t"]
pub const cyber_gear_config_index_t_CONFIG_R_TIME_USE1: cyber_gear_config_index_t = 12289;
#[doc = " timeUse1\n 参数类型 uint16_t"]
pub const cyber_gear_config_index_t_CONFIG_R_TIME_USE2: cyber_gear_config_index_t = 12290;
#[doc = " timeUse1\n 参数类型 uint16_t"]
pub const cyber_gear_config_index_t_CONFIG_R_TIME_USE3: cyber_gear_config_index_t = 12291;
#[doc = " encoderRaw 磁编码器采样值\n 参数类型 uint16_t"]
pub const cyber_gear_config_index_t_CONFIG_R_ENCODER_RAW: cyber_gear_config_index_t = 12292;
#[doc = " mcuTemp mcu 内部 温度，*10\n 参数类型 uint16_t"]
pub const cyber_gear_config_index_t_CONFIG_R_MCU_TEMP: cyber_gear_config_index_t = 12293;
#[doc = " motorTemp 电机 ntc 温度， *10\n 参数类型 uint16_t"]
pub const cyber_gear_config_index_t_CONFIG_R_MOTOR_TEMP: cyber_gear_config_index_t = 12294;
#[doc = " vBus(mv) 母线电 压\n 参数类型 uint16_t"]
pub const cyber_gear_config_index_t_CONFIG_R_VBUS_MV: cyber_gear_config_index_t = 12295;
#[doc = " adc1Offset adc 采样 通道1 零电流 偏置\n 参数类型 int32_t"]
pub const cyber_gear_config_index_t_CONFIG_R_ADC1_OFFSET: cyber_gear_config_index_t = 12296;
#[doc = " adc2Offset adc 采样 通道2 零电流 偏置\n 参数类型 int32_t"]
pub const cyber_gear_config_index_t_CONFIG_R_ADC2_OFFSET: cyber_gear_config_index_t = 12297;
#[doc = " adc1Raw adc 采样 值1\n 参数类型 uint32_t"]
pub const cyber_gear_config_index_t_CONFIG_R_ADC1_RAW: cyber_gear_config_index_t = 12298;
#[doc = " adc2Raw adc 采样 值2\n 参数类型 uint32_t"]
pub const cyber_gear_config_index_t_CONFIG_R_ADC2_RAW: cyber_gear_config_index_t = 12299;
#[doc = " VBUS 母线电 压V\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_VBUS_V: cyber_gear_config_index_t = 12300;
#[doc = " cmdId id环指令，A\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_CMD_ID: cyber_gear_config_index_t = 12301;
#[doc = " cmdIq iq 环指令，A\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_CMD_IQ: cyber_gear_config_index_t = 12302;
#[doc = " cmdlocref 位置环指令， rad\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_CMD_LOC_REF: cyber_gear_config_index_t = 12303;
#[doc = " cmdspdref 速度环指令， rad/s\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_CMD_SPD_REF: cyber_gear_config_index_t = 12304;
#[doc = " cmdTorque 转矩指令，nm\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_CMD_TORQUE: cyber_gear_config_index_t = 12305;
#[doc = " cmdPos mit 协议 角度指令\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_CMD_POS: cyber_gear_config_index_t = 12306;
#[doc = " cmdVel mit 协议速度指令\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_CMD_VEL: cyber_gear_config_index_t = 12307;
#[doc = " rotation 圈数\n 参数类型 int16_t"]
pub const cyber_gear_config_index_t_CONFIG_R_ROTATION: cyber_gear_config_index_t = 12308;
#[doc = " modPos 电机未计圈机械角度， rad\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_MOD_POS: cyber_gear_config_index_t = 12309;
#[doc = " mechPos 负载端计圈机械角度， rad\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_MECH_POS: cyber_gear_config_index_t = 12310;
#[doc = " mechVel 负载端转速,rad/ s\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_MECH_VEL: cyber_gear_config_index_t = 12311;
#[doc = " elecPos 电气角度\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_ELEC_POS: cyber_gear_config_index_t = 12312;
#[doc = " ia U线电流，A\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_IA: cyber_gear_config_index_t = 12313;
#[doc = " ib V线电流，A\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_IB: cyber_gear_config_index_t = 12314;
#[doc = " ic W线电流，A\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_IC: cyber_gear_config_index_t = 12315;
#[doc = " tick\n 参数类型 uint32_t"]
pub const cyber_gear_config_index_t_CONFIG_R_TICK: cyber_gear_config_index_t = 12316;
#[doc = " phaseOrder 标定方向标记\n 参数类型 uint8_t"]
pub const cyber_gear_config_index_t_CONFIG_R_PHASE_ORDER: cyber_gear_config_index_t = 12317;
#[doc = " iqf iq 滤波值，A\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_IQF: cyber_gear_config_index_t = 12318;
#[doc = " boardTemp 板上温度，*10\n 参数类型 int16_t"]
pub const cyber_gear_config_index_t_CONFIG_R_BOARD_TEMP: cyber_gear_config_index_t = 12319;
#[doc = " iq iq 原值， A\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_IQ: cyber_gear_config_index_t = 12320;
#[doc = " id id 原值， A\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_ID: cyber_gear_config_index_t = 12321;
#[doc = " faultSta 故障状态值\n 参数类型 uint32_t"]
pub const cyber_gear_config_index_t_CONFIG_R_FAULT_STATUS: cyber_gear_config_index_t = 12322;
#[doc = " warnSta 警告状态值\n 参数类型 uint32_t"]
pub const cyber_gear_config_index_t_CONFIG_R_WARN_STATUS: cyber_gear_config_index_t = 12323;
#[doc = " drv_fault 驱动芯片故障值\n 参数类型 uint16_t"]
pub const cyber_gear_config_index_t_CONFIG_R_DRV_FAULT: cyber_gear_config_index_t = 12324;
#[doc = " drv_temp 驱动芯片温度值，度\n 参数类型 int16_t"]
pub const cyber_gear_config_index_t_CONFIG_R_DRV_TEMP: cyber_gear_config_index_t = 12325;
#[doc = " Uq q 轴电压\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_UQ: cyber_gear_config_index_t = 12326;
#[doc = " Ud d 轴电压\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_UD: cyber_gear_config_index_t = 12327;
#[doc = " dtc_u U 相输出 占空比\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_DTC_U: cyber_gear_config_index_t = 12328;
#[doc = " dtc_v V 相输出 占空比\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_DTC_V: cyber_gear_config_index_t = 12329;
#[doc = " dtc_w W 相输出 占空比\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_DTC_W: cyber_gear_config_index_t = 12330;
#[doc = " v_bus 闭环中 vbus\n 参数类型"]
pub const cyber_gear_config_index_t_CONFIG_R_CLOSED_LOOP_V_BUS: cyber_gear_config_index_t = 12331;
#[doc = " v_ref 闭环 vq,vd 合 成电压\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_CLOSED_LOOP_V_REF: cyber_gear_config_index_t = 12332;
#[doc = " torque_fdb 转矩反 馈值，nm\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_TORQUE_FDB: cyber_gear_config_index_t = 12333;
#[doc = " rated_i 电机额 定电流\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_RATED_I: cyber_gear_config_index_t = 12334;
#[doc = " limit_i 电机限 制最大 电流\n 参数类型 float"]
pub const cyber_gear_config_index_t_CONFIG_R_LIMIT_I: cyber_gear_config_index_t = 12335;
pub type cyber_gear_config_index_t = ::core::ffi::c_uint;
#[doc = " 运控模式\n 0: 运控模式 1: 位置模式 2: 速度模式 3: 电流模式\n 参数类型 uint8_t\n 参数字节数 1\n 参数说明"]
pub const cyber_gear_read_write_parameter_index_t_PARAMETER_RUN_MODE:
    cyber_gear_read_write_parameter_index_t = 28677;
#[doc = " 电流模式 Iq 指令\n 参数类型 float\n 参数字节数 4\n 参数说明 -27~27A"]
pub const cyber_gear_read_write_parameter_index_t_PARAMETER_IQ_REF:
    cyber_gear_read_write_parameter_index_t = 28678;
#[doc = " 转速模式转速指令\n 参数类型 float\n 参数字节数 4\n 参数说明 -30~30rad/s"]
pub const cyber_gear_read_write_parameter_index_t_PARAMETER_SPD_REF:
    cyber_gear_read_write_parameter_index_t = 28682;
#[doc = " 转矩限制\n 参数类型 float\n 参数字节数 4\n 参数说明 0~12Nm"]
pub const cyber_gear_read_write_parameter_index_t_PARAMETER_IMIT_TORQUE:
    cyber_gear_read_write_parameter_index_t = 28683;
#[doc = " 电流的 Kp\n 参数类型 float\n 参数字节数 4\n 参数说明 默认值 0.125"]
pub const cyber_gear_read_write_parameter_index_t_PARAMETER_CUR_KP:
    cyber_gear_read_write_parameter_index_t = 28688;
#[doc = " 电流的 Ki\n 参数类型 float\n 参数字节数 4\n 参数说明 默认值 0.0158"]
pub const cyber_gear_read_write_parameter_index_t_PARAMETER_CUR_KI:
    cyber_gear_read_write_parameter_index_t = 28689;
#[doc = " 电流滤波系数 filt_gain\n 参数类型 float\n 参数字节数 4\n 参数说明 默认值 0~1.0，默认值 W/R 0.1"]
pub const cyber_gear_read_write_parameter_index_t_PARAMETER_CUR_FILT_GAIN:
    cyber_gear_read_write_parameter_index_t = 28692;
#[doc = " 位置模式角度指令\n 参数类型 float\n 参数字节数 4\n 参数说明 rad"]
pub const cyber_gear_read_write_parameter_index_t_PARAMETER_LOC_REF:
    cyber_gear_read_write_parameter_index_t = 28694;
#[doc = " 位置模式速度设置\n 参数类型 float\n 参数字节数 4\n 参数说明 0~30rad/s"]
pub const cyber_gear_read_write_parameter_index_t_PARAMETER_LIMIT_SPD:
    cyber_gear_read_write_parameter_index_t = 28695;
#[doc = " 速度位置模式电流设置\n 参数类型 float\n 参数字节数 4\n 参数说明 0~27A"]
pub const cyber_gear_read_write_parameter_index_t_PARAMETER_LIMIT_CUR:
    cyber_gear_read_write_parameter_index_t = 28696;
pub type cyber_gear_read_write_parameter_index_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cyber_gear_can_t {
    pub can_id: cyber_gear_can_t__bindgen_ty_1,
    pub can_data: cyber_gear_can_t__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cyber_gear_can_t__bindgen_ty_1 {
    pub value: u32,
    pub bytes: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cyber_gear_can_t__bindgen_ty_1"]
        [::core::mem::size_of::<cyber_gear_can_t__bindgen_ty_1>() - 4usize];
    ["Alignment of cyber_gear_can_t__bindgen_ty_1"]
        [::core::mem::align_of::<cyber_gear_can_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: cyber_gear_can_t__bindgen_ty_1::value"]
        [::core::mem::offset_of!(cyber_gear_can_t__bindgen_ty_1, value) - 0usize];
    ["Offset of field: cyber_gear_can_t__bindgen_ty_1::bytes"]
        [::core::mem::offset_of!(cyber_gear_can_t__bindgen_ty_1, bytes) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union cyber_gear_can_t__bindgen_ty_2 {
    pub value: u64,
    pub bytes: [u8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cyber_gear_can_t__bindgen_ty_2"]
        [::core::mem::size_of::<cyber_gear_can_t__bindgen_ty_2>() - 8usize];
    ["Alignment of cyber_gear_can_t__bindgen_ty_2"]
        [::core::mem::align_of::<cyber_gear_can_t__bindgen_ty_2>() - 8usize];
    ["Offset of field: cyber_gear_can_t__bindgen_ty_2::value"]
        [::core::mem::offset_of!(cyber_gear_can_t__bindgen_ty_2, value) - 0usize];
    ["Offset of field: cyber_gear_can_t__bindgen_ty_2::bytes"]
        [::core::mem::offset_of!(cyber_gear_can_t__bindgen_ty_2, bytes) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cyber_gear_can_t"][::core::mem::size_of::<cyber_gear_can_t>() - 16usize];
    ["Alignment of cyber_gear_can_t"][::core::mem::align_of::<cyber_gear_can_t>() - 8usize];
    ["Offset of field: cyber_gear_can_t::can_id"]
        [::core::mem::offset_of!(cyber_gear_can_t, can_id) - 0usize];
    ["Offset of field: cyber_gear_can_t::can_data"]
        [::core::mem::offset_of!(cyber_gear_can_t, can_data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cyber_gear_motion_control_t {
    pub motor_can_id: u8,
    pub target_location: f32,
    pub target_speed: f32,
    pub kp: f32,
    pub kd: f32,
    pub torque: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cyber_gear_motion_control_t"]
        [::core::mem::size_of::<cyber_gear_motion_control_t>() - 24usize];
    ["Alignment of cyber_gear_motion_control_t"]
        [::core::mem::align_of::<cyber_gear_motion_control_t>() - 4usize];
    ["Offset of field: cyber_gear_motion_control_t::motor_can_id"]
        [::core::mem::offset_of!(cyber_gear_motion_control_t, motor_can_id) - 0usize];
    ["Offset of field: cyber_gear_motion_control_t::target_location"]
        [::core::mem::offset_of!(cyber_gear_motion_control_t, target_location) - 4usize];
    ["Offset of field: cyber_gear_motion_control_t::target_speed"]
        [::core::mem::offset_of!(cyber_gear_motion_control_t, target_speed) - 8usize];
    ["Offset of field: cyber_gear_motion_control_t::kp"]
        [::core::mem::offset_of!(cyber_gear_motion_control_t, kp) - 12usize];
    ["Offset of field: cyber_gear_motion_control_t::kd"]
        [::core::mem::offset_of!(cyber_gear_motion_control_t, kd) - 16usize];
    ["Offset of field: cyber_gear_motion_control_t::torque"]
        [::core::mem::offset_of!(cyber_gear_motion_control_t, torque) - 20usize];
};
pub const cyber_gear_motor_mode_t_MOTOR_MODE_RESET: cyber_gear_motor_mode_t = 0;
pub const cyber_gear_motor_mode_t_MOTOR_MODE_CALI: cyber_gear_motor_mode_t = 1;
pub const cyber_gear_motor_mode_t_MOTOR_MODE_MOTOR: cyber_gear_motor_mode_t = 2;
pub type cyber_gear_motor_mode_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct cyber_gear_motor_status_t {
    pub host_can_id: u8,
    pub motor_can_id: u8,
    pub current_torque: f32,
    pub current_location: f32,
    pub current_speed: f32,
    pub current_temperature: f32,
    pub has_calibration_error: ::core::ffi::c_int,
    pub has_hall_encode_error: ::core::ffi::c_int,
    pub has_magnetic_encoding_error: ::core::ffi::c_int,
    pub has_over_temperature: ::core::ffi::c_int,
    pub has_over_current: ::core::ffi::c_int,
    pub has_undervoltage: ::core::ffi::c_int,
    pub mode_type: cyber_gear_motor_mode_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cyber_gear_motor_status_t"]
        [::core::mem::size_of::<cyber_gear_motor_status_t>() - 48usize];
    ["Alignment of cyber_gear_motor_status_t"]
        [::core::mem::align_of::<cyber_gear_motor_status_t>() - 4usize];
    ["Offset of field: cyber_gear_motor_status_t::host_can_id"]
        [::core::mem::offset_of!(cyber_gear_motor_status_t, host_can_id) - 0usize];
    ["Offset of field: cyber_gear_motor_status_t::motor_can_id"]
        [::core::mem::offset_of!(cyber_gear_motor_status_t, motor_can_id) - 1usize];
    ["Offset of field: cyber_gear_motor_status_t::current_torque"]
        [::core::mem::offset_of!(cyber_gear_motor_status_t, current_torque) - 4usize];
    ["Offset of field: cyber_gear_motor_status_t::current_location"]
        [::core::mem::offset_of!(cyber_gear_motor_status_t, current_location) - 8usize];
    ["Offset of field: cyber_gear_motor_status_t::current_speed"]
        [::core::mem::offset_of!(cyber_gear_motor_status_t, current_speed) - 12usize];
    ["Offset of field: cyber_gear_motor_status_t::current_temperature"]
        [::core::mem::offset_of!(cyber_gear_motor_status_t, current_temperature) - 16usize];
    ["Offset of field: cyber_gear_motor_status_t::has_calibration_error"]
        [::core::mem::offset_of!(cyber_gear_motor_status_t, has_calibration_error) - 20usize];
    ["Offset of field: cyber_gear_motor_status_t::has_hall_encode_error"]
        [::core::mem::offset_of!(cyber_gear_motor_status_t, has_hall_encode_error) - 24usize];
    ["Offset of field: cyber_gear_motor_status_t::has_magnetic_encoding_error"]
        [::core::mem::offset_of!(cyber_gear_motor_status_t, has_magnetic_encoding_error) - 28usize];
    ["Offset of field: cyber_gear_motor_status_t::has_over_temperature"]
        [::core::mem::offset_of!(cyber_gear_motor_status_t, has_over_temperature) - 32usize];
    ["Offset of field: cyber_gear_motor_status_t::has_over_current"]
        [::core::mem::offset_of!(cyber_gear_motor_status_t, has_over_current) - 36usize];
    ["Offset of field: cyber_gear_motor_status_t::has_undervoltage"]
        [::core::mem::offset_of!(cyber_gear_motor_status_t, has_undervoltage) - 40usize];
    ["Offset of field: cyber_gear_motor_status_t::mode_type"]
        [::core::mem::offset_of!(cyber_gear_motor_status_t, mode_type) - 44usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cyber_gear_single_parameter_t {
    pub host_can_id: u8,
    pub motor_can_id: u8,
    pub index: cyber_gear_read_write_parameter_index_t,
    pub data: cyber_gear_single_parameter_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cyber_gear_single_parameter_t__bindgen_ty_1 {
    pub value: u32,
    pub bytes: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cyber_gear_single_parameter_t__bindgen_ty_1"]
        [::core::mem::size_of::<cyber_gear_single_parameter_t__bindgen_ty_1>() - 4usize];
    ["Alignment of cyber_gear_single_parameter_t__bindgen_ty_1"]
        [::core::mem::align_of::<cyber_gear_single_parameter_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: cyber_gear_single_parameter_t__bindgen_ty_1::value"]
        [::core::mem::offset_of!(cyber_gear_single_parameter_t__bindgen_ty_1, value) - 0usize];
    ["Offset of field: cyber_gear_single_parameter_t__bindgen_ty_1::bytes"]
        [::core::mem::offset_of!(cyber_gear_single_parameter_t__bindgen_ty_1, bytes) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cyber_gear_single_parameter_t"]
        [::core::mem::size_of::<cyber_gear_single_parameter_t>() - 12usize];
    ["Alignment of cyber_gear_single_parameter_t"]
        [::core::mem::align_of::<cyber_gear_single_parameter_t>() - 4usize];
    ["Offset of field: cyber_gear_single_parameter_t::host_can_id"]
        [::core::mem::offset_of!(cyber_gear_single_parameter_t, host_can_id) - 0usize];
    ["Offset of field: cyber_gear_single_parameter_t::motor_can_id"]
        [::core::mem::offset_of!(cyber_gear_single_parameter_t, motor_can_id) - 1usize];
    ["Offset of field: cyber_gear_single_parameter_t::index"]
        [::core::mem::offset_of!(cyber_gear_single_parameter_t, index) - 4usize];
    ["Offset of field: cyber_gear_single_parameter_t::data"]
        [::core::mem::offset_of!(cyber_gear_single_parameter_t, data) - 8usize];
};
unsafe extern "C" {
    pub fn cyber_gear_can_init(frame: *const cyber_gear_can_t);
}
unsafe extern "C" {
    pub fn cyber_gear_can_dump(frame: *const cyber_gear_can_t);
}
unsafe extern "C" {
    pub fn cyber_gear_set_can_id_int_value(
        frame: *const cyber_gear_can_t,
        bit_start: ::core::ffi::c_int,
        bit_length: ::core::ffi::c_int,
        value: ::core::ffi::c_int,
    );
}
unsafe extern "C" {
    pub fn cyber_gear_get_can_id_int_value(
        frame: *const cyber_gear_can_t,
        bit_start: ::core::ffi::c_int,
        bit_length: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn cyber_gear_set_can_id_communication_type(
        frame: *const cyber_gear_can_t,
        type_: cyber_gear_can_communication_type_t,
    );
}
unsafe extern "C" {
    pub fn cyber_gear_set_can_id_host_can_id(
        frame: *const cyber_gear_can_t,
        value: ::core::ffi::c_int,
    );
}
unsafe extern "C" {
    pub fn cyber_gear_set_can_id_target_can_id(
        frame: *const cyber_gear_can_t,
        value: ::core::ffi::c_int,
    );
}
unsafe extern "C" {
    pub fn cyber_gear_build_parameter_write_frame_with_int_value(
        frame: *const cyber_gear_can_t,
        index: cyber_gear_read_write_parameter_index_t,
        value: ::core::ffi::c_int,
    );
}
unsafe extern "C" {
    pub fn cyber_gear_build_parameter_write_frame_with_float_value(
        frame: *const cyber_gear_can_t,
        index: cyber_gear_read_write_parameter_index_t,
        value: f32,
    );
}
unsafe extern "C" {
    pub fn cyber_gear_build_parameter_read_frame(
        frame: *const cyber_gear_can_t,
        index: cyber_gear_read_write_parameter_index_t,
    );
}
unsafe extern "C" {
    pub fn cyber_gear_parse_parameter_read_frame(
        frame: *const cyber_gear_can_t,
    ) -> cyber_gear_single_parameter_t;
}
unsafe extern "C" {
    pub fn cyber_gear_get_can_id_communication_type(
        frame: *const cyber_gear_can_t,
    ) -> cyber_gear_can_communication_type_t;
}
unsafe extern "C" {
    pub fn cyber_gear_get_can_id_target_id(frame: *const cyber_gear_can_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn cyber_gear_get_can_id_host_id(frame: *const cyber_gear_can_t) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn cyber_gear_build_motion_control_frame(
        frame: *const cyber_gear_can_t,
        control_param: cyber_gear_motion_control_t,
    );
}
unsafe extern "C" {
    pub fn cyber_gear_parse_motor_status_frame(
        frame: *const cyber_gear_can_t,
    ) -> cyber_gear_motor_status_t;
}
unsafe extern "C" {
    pub fn cyber_gear_build_set_mechanical_zero_position_frame(frame: *const cyber_gear_can_t);
}
unsafe extern "C" {
    pub fn cyber_gear_build_set_can_id_frame(
        frame: *const cyber_gear_can_t,
        setting_can_id: ::core::ffi::c_int,
    );
}
unsafe extern "C" {
    pub fn cyber_gear_dump_motor_status_frame(status: cyber_gear_motor_status_t);
}
